[{"content":"一. Building IPv6 addressing scheme using Hybrid Duplicate Address Detection to prevent Denial of Service Attack 1. Duplicate Address Detection Whenever a host is assigned an IPv6 address, it performs a DAD check to ensure that no other hosts are already using or vying for the same address. DAD的过程通常包括以下步骤： \t主机生成一个IPv6地址，并将其标记为“tentative”（临时）状态。 \t主机发送一个邻居发现协议的邻居请求（NS）消息，询问网络上是否有其他设备正在使用这个地址。 \t如果在一定时间内没有收到邻居通告（NA）消息作为响应，或者收到的响应表明没有冲突，那么主机可以确认这个地址是唯一的，并开始使用它。 \t如果收到一个NA消息，表明网络上已经有设备在使用这个地址，主机则必须选择另一个地址或采取其他措施解决冲突。 Static IP address 长期分配给特定设备的IP地址，不会发生变化。 The current defenses against the DAD attack include significant flaws, such as excessive computation, non-scalability, and the need to modify the protocol.\n2. Denial of Service (DoS) and Man-In-The-Middle (MITM) attacks. Denial of Service (DoS) 攻击 DoS攻击是一种使网络服务不可用的攻击方式。攻击者的目标是使目标服务器、服务或网络无法处理合法用户的请求。这通常是通过以下几种方式实现的： \t流量过载：攻击者发送大量流量到目标服务器，使其网络带宽饱和，无法处理正常流量。 \t资源耗尽：攻击者利用服务器或服务的特定漏洞，使其消耗过多资源（如CPU、内存），导致无法响应合法请求。 \t服务拒绝：攻击者通过发送特定的请求，使服务崩溃或进入无法处理其他请求的状态。 Man-In-The-Middle (MITM) 攻击 MITM攻击是一种攻击者插入到两个通信方之间的攻击方式。攻击者可以截获、修改和转发通信双方的数据，而通信方可能毫不知情。这种攻击通常涉及以下步骤： \t拦截通信：攻击者通过各种手段（如伪造Wi-Fi网络）截获两个通信方之间的数据传输。 \t身份伪装：攻击者伪装成合法的通信方，与另一方建立信任关系。 \t数据篡改：攻击者可以读取、修改或注入恶意数据到传输中，而不被通信方察觉。 \t会话劫持：攻击者可能完全接管一个或两个通信方的会话，进行未授权的操作。\n3. What types of network requirements are needed? The hybrid DAD method is demonstrated in this study to reduce the DoS attack during the IPv6 setup process in the network. In IPv6, to enhance privacy and security, IP addresses are commonly divided into two parts: the DAD ID (usually the network prefix) and the node ID (often generated from the device\u0026rsquo;s MAC address but can also be randomly generated to improve privacy). This method is known as Privacy Extensions for Addresses, and its purpose is to reduce the risk of exposing user privacy information through IP addresses. Address predictability: If the node ID is fixed or predictable (such as those based on a MAC address), it allows attackers to more easily guess or track a specific device\u0026rsquo;s IP address. Using randomly generated node IDs can reduce this risk. Multicast listening: During the Duplicate Address Detection (DAD) process, address queries are completed by sending multicast messages, which may increase the network\u0026rsquo;s attack surface. For example, attackers can listen to these multicast requests to identify new devices in the network or prevent legitimate devices from using their IP addresses by sending false neighbor advertisement messages. DAD conflicts: Attackers can intentionally respond to all DAD queries in the network, causing address configuration failure. This type of attack is known as a DAD conflict attack.\n4. The Mechanism Of Hybrid Duplicate Address Detection IPv6地址结构 IPv6地址总长128位，通常被分为两个64位的部分： 全局路由前缀（Global Routing Prefix, GRP）：64位，用于网络路由。 接口标识符（Interface ID, IID）：64位，用于在本地网络中唯一标识接口。 接口标识符的进一步细分接口标识符进一步被分为两个32位部分： 最高有效位（Most Significant bits, MS-32） 最低有效位（Least Significant bits, LS-32）\n这两个部分又各自被分为两个16位部分，用于混合DAD的计算： LS-32 分为： DAD ID（16位） Secret ID-1（16位） MS-32 分为： Node ID（16位） Secret ID-2（16位） 混合DAD值的计算 在进行重复地址检测时，会使用异或（XOR）运算来计算混合DAD值，以提高安全性： 对于邻居请求帧（NS, Neighbor Solicitation）：计算最低有效16位（LS-16），通过对DAD ID和Secret ID-1进行异或（XOR）运算。 对于邻居通告帧（NA, Neighbor Advertisement）：当网络中检测到地址重复时，已建立节点会响应一个携带混合DAD最高有效16位（MS-16）的NA帧。MS-16是通过对Node ID和Secret ID-2进行异或（XOR）运算得到的。这种方法通过使用秘密ID（Secret IDs）和XOR运算，增加了地址配置过程的隐私性和安全性，使得攻击者难以预测或推断出实际的接口标识符。这样的设计可以有效防止一些常见的网络攻击，如地址欺骗和DAD冲突。\n假设的IPv6接口标识符（IID）为 0000:8a2e:0370:7334。 MS-32: 0000:8a2e Node ID: 0000 Secret ID-2: 8a2e LS-32: 0370:7334 DAD ID: 0370 Secret ID-1: 7334 进行XOR计算 MS-16 (混合): 0000 XOR 8a2e = 8a2e LS-16 (混合): 0370 XOR 7334 = 7044 算法 1：使用混合DAD过程的IP配置 初始化：hybrid DAD_count 和 hybrid DAD_timeout 设为初始值。 生成新IP地址：设备尝试使用 0000:8a2e:0370:7334。 广播NS_hybrid DAD：设备发送带有混合 LS-16 (7044) 的NS请求。 接收NA_hybrid DAD：等待网络上其他设备的响应。 循环检测： 如果收到的NA消息是来自一个已经建立的节点，且 MS-16 (8a2e) 匹配，说明地址可能冲突。 如果达到 thresholdDAD（尝试次数上限），并且冲突持续存在，设备会重新生成新的MS位并重复过程。 超时或阈值：如果持续收到冲突响应，或者超时，设备广播网络错误消息并报告失败。 算法 2：验证混合DAD 接收NS_hybrid DAD：设备接收来自其他设备的NS请求，检查 LS-16。 验证LS-16： 如果 LS-16 (7044) 与本地配置匹配，发送NA_hybrid DAD响应，表明存在地址冲突。 如果不匹配，丢弃请求并返回失败，表明地址是唯一的。 结果与通讯 如果DAD过程成功，没有冲突，设备将确认其IP地址 0000:8a2e:0370:7334 是唯一的，并用于通信。 如果存在冲突，设备需重新选择Node ID或DAD ID部分，重新计算，直到没有冲突为止。 这个过程确保IPv6地址在网络上的唯一性，避免了地址冲突，同时通过混合DAD的额外安全措施（使用XOR和秘密ID），增加了网络通信的安全性和隐私保护。\n","permalink":"https://Clow5211.github.io/posts/blog/blog2/","summary":"一. Building IPv6 addressing scheme using Hybrid Duplicate Address Detection to prevent Denial of Service Attack 1. Duplicate Address Detection Whenever a host is assigned an IPv6 address, it performs a DAD check to ensure that no other hosts are already using or vying for the same address. DAD的过程通常包括以下步骤：  主机生成一个IPv6地址，并将其标记为“tentative”（临时）状态。  主机发送一个邻居发现协议的邻居请求（NS）消息，询问网络上是否有其他设备正","title":"Hybrid Duplicate Address Detection in IPv6 to prevent Denial of Service Attack"},{"content":"0. 摘要 专门设计的、结合两方面的新模型。新的评估测试集SLMTokBench benchmark。\n1. 引言 LLM的卓越表现促进了语音语言模型的发展。在多种语音处理任务中都使用到了离散语音表示。如下图所示。\n语义表征(semantic tokens)通常是自监督的预训练模型，训练目标是掩码语言建模，通过特定中间层对表征进行k-means聚类，表征是一维结构的序列。声学表征(acoustic tokens)通常是神经音频编解码器模型，训练目标是音频重构，通过RVQ(residual vector quantization)进行离散化，表征是由时间步长和量化器两个维度组成的矩阵。\n基于这两种离散语音表征，语音语言模型的建模方法有三种：\n语义表征+外部单元声码器。质量低、声学细节丢失。 以VALL-E这种zero-shot TTS为例的声学表征模型。声学表征中的信息太复杂导致的语音内容不准确。 级联语义表征模型和声学表征模型。级联模型的缺点，以及信息冗余重复、浪费。这三者的表现与作者的模型相比如下表所示。 Accurate Content High-quality Speech Single Tokenizer Semantic LM yes no yes Acoustic LM no yes yes Hierarchical LM yes yes no USLM(thers) no yes yes 因此作者认为理想的语音表征应该保有两个关键特性：\n与文本强对齐。 语音信息的有效保存(损失少)。 因此提出了Speech Language Model Token Benchmark测试集来评估语音表征是否适用于语音语言模型。评估表明语义表征高对齐、低信息，声学表征高信息、低对齐。作者的做法是基于声学表征模型，在RVQ结构中进行信息解耦，通过语义教师指导使得第一个RVQ quantizer生成包含文本信息的表征，后续的quantizer对信息进行补充。\n实验结果表明，USLM在语音重建性能无影响的前提下，在语音处理任务上更强。\n论文贡献为三点:\nSpeechTokenizer，基于Acoustic Tokens保有Semantic Tokens。 SLMTokBench benchmark，适用于评估在语音语言模型上的表现。 USLM，outperforms VALL-E on zero-shot TTS task。 2. 结论 依旧是三点贡献。\n3. 测试集SLMTokBench 根据两个特性来评测模型效果。\n4. SpeechTolenizer 基于LSTM-\u0026gt;BiLSTM的EnCodec，HuBert作为语义教师指导残差量化过程。余弦相似度与伪标签，获得损失。\n","permalink":"https://Clow5211.github.io/posts/read/read1/","summary":"0. 摘要 专门设计的、结合两方面的新模型。新的评估测试集SLMTokBench benchmark。 1. 引言 LLM的卓越表现促进了语音语言模型的发展。在多种语音处理任务中都使用到了离散语音表示。如下图所示。 语义表征(semantic tokens)通常是自监督的预训练模型，训练目标是掩码语","title":"SpeechTokenizer: Unified Speech Tokenizer For Speech Language Models"},{"content":"一. EnCodec 1. 模型任务 EnCodec是在SoundStream模型的基础上提出的，用于实现音频数据的高效压缩。其被提出是为了解决音频数据的实时传输，因为要保证数据传输的实时性，所以需要对音频数据进行压缩，同时也要保证被压缩的质量。该工作就是利用神经网络来解决压缩与恢复工作。\n2. 模型发展 压缩可以追溯到AE(Auto Encoder)模型，是一个编解码模型，由编码器进行压缩，解码器进行恢复。这是一个自监督模型，它只需要对模型的输入x和模型的输出x`进行损失计算即可。\n然而由于AE模型编码器编码出来的向量空间不规整，其无法适用于生成任务，因为解码器并不能识别一个随意的向量。因为为了使编码空间规整，VAE(Variational Auto Encoder)模型被提出。其使编码向量满足正态分布，这样编码器也可以识别正态分布的向量了，进而实现随机生成任务。\n但是实验结果表明VAE模型的生成并不理想，进而被认为连续的编码向量不如转换为离散。这种类似选项或者是词汇的输入更符合人类创作的过程。VQ-VAE(Vector Quantised - Variational Auto Encoder)模型使用类似嵌入层(Embedding)的操作让解码器能够识别离散化的向量，该层被称作嵌入空间(embedding space)，在后续文章中被称作码本(codebook)。然而这个离散向量的空间又变成不好采样的了，为了解决这个问题作者训练了一个生成模型学习生成离散样本，进而解决上述问题。使用logit获取离散向量再把它映射成连续向量被认为是很多余的操作，在VQ-VAE模型中使用编码器的输出向量找寻码本中距离最近的向量进行替换，生成离散向量便是如此过程。那么问题又来了，反向传播怎么办？VQ-VAE基于“straight-through”技术使用了sg(stop gradient)运算解决了这个问题，细节不进行研究了。后续该运算也解决了码本训练的问题。\n3. 模型结构 模型框架图如下所示，主要由Encoder、Quantizer、Decoder以及Discriminator四部分构成，共计算了6处损失函数。\n编码器和解码器的设计基本是镜像的，由1D卷积层、B个卷积块、两层LSTM和最后一个1D卷积层组成。模型支持流式与非流式，只是padding和归一化不同。\n量化器是由RVQ(Residual Vector Quantization，残差向量量化)实现的，那么它与VQ-VAE中的VQ有何不同呢？单个码本经原作者计算是远远不够的，这样的话需要多个码本来解决问题，多个quantization block对应多个码本，之间用残差连接，相当于后面的quantization block量化的是前一个的误差，具体细节可在参考文献中了解。该部分还加入了一个较小的语言模型，根据当前时刻的RVQ向量来预测下一个时刻的RVQ向量，从而提前完成语音解码的工作。其加速了解码速度。\n模型使用多个判别器来评估解码器恢复的效果，这里用到了GAN模型。\n4. 参考文献 知乎：https://zhuanlan.zhihu.com/p/633744455\n知乎：https://zhuanlan.zhihu.com/p/672684663\n论文链接：https://arxiv.org/pdf/2210.13438\n二. VALL-E 1. 模型任务：语音合成大模型 上篇作者认为连续的音频数据经过Encodec压缩后变成了离散的数据，那就可以将这些离散的ID视作一个个token，用大量的语音数据训练出一个语音的“大语言模型”。微软推出的VALL-E和VALL-E-X模型做的就是这样的工作。zero-shot TTS!!!\n2. 模型过程 EnCodec由于将语音进行了压缩，重建质量高和压缩程度大，很好地解决了语音和文本在信息密度和长度上的巨大差异。并且Encodec有现成的解码器能够将离散表征转换为声音波形，无需训练额外的声码器。\nRQV中生成的离散向量被称为声学词元(acoustic tokens)，与被音素转换模块由文本提示词转换成的因素一同送入模型，预测后续的声学词元，进而被解码器转化为声学波形。\n知乎作者给出的结论：VALLE就是使用Encodec的离散表征来做acoustic tokens，堆大数据来做语音领域的大语言模型。\n3. 参考文献 知乎：https://zhuanlan.zhihu.com/p/672852107\n论文链接：https://arxiv.org/pdf/2301.02111\ndemo：https://lifeiteng.github.io/valle/index.html\n","permalink":"https://Clow5211.github.io/posts/blog/blog1/","summary":"一. EnCodec 1. 模型任务 EnCodec是在SoundStream模型的基础上提出的，用于实现音频数据的高效压缩。其被提出是为了解决音频数据的实时传输，因为要保证数据传输的实时性，所以需要对音频数据进行压缩，同时也要保证被压缩的质量。该工作就是利用神经网络来解决压缩与恢复工作。 2. 模型发展 压","title":"EnCodec在大语言模型上的调研"},{"content":"1. 修改 需要进行更改的文件为layouts/partials/post_meta.html、layouts/partials/author.html、layouts/partials/extend_head.html以及params。\nlayouts/partials/post_meta.html的更改链接为https://github.com/xyming108/sulv-hugo-papermod/blob/main/layouts/partials/post_meta.html，其更改结果如下：\n\u0026lt;!--如果单独复制这段代码，需要从 extend_head.html 中找到 font-awesome 引入，如下--\u0026gt; \u0026lt;!--\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css\u0026#34;\u0026gt;--\u0026gt; \u0026lt;style\u0026gt; i[id*=\u0026#34;post_meta_style\u0026#34;] { display: flex; align-items: center; margin: 0 0 10px 0; } .parent-post-meta { display: flex; flex-wrap: wrap; opacity: 0.8; } \u0026lt;/style\u0026gt; \u0026lt;span class=\u0026#34;parent-post-meta\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;post_meta_style_1\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fa fa-calendar-check-o\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; {{- (.Date.Format (default \u0026#34;January 2, 2006\u0026#34; .Site.Params.DateFormat)) }} \u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;!-- \u0026lt;span id=\u0026#34;post_meta_style_2\u0026#34;\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;span class=\u0026#34;fa fa-calendar-plus-o\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;span\u0026gt;--\u0026gt; \u0026lt;!-- \u0026amp;nbsp;更新\u0026amp;nbsp;{{- (.Lastmod.Format (.Site.Params.dateFormat | default \u0026#34;2006-01-02\u0026#34;)) }}--\u0026gt; \u0026lt;!-- \u0026amp;nbsp;|\u0026amp;nbsp;--\u0026gt; \u0026lt;!-- \u0026lt;/span\u0026gt;--\u0026gt; \u0026lt;!-- \u0026lt;/span\u0026gt;--\u0026gt; \u0026lt;span id=\u0026#34;post_meta_style_3\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fa fa-file-word-o\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; {{- .WordCount }}字 \u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;post_meta_style_4\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fa fa-clock-o\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; {{- .ReadingTime }}分钟 \u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;post_meta_style_5\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fa fa-user-o\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; {{- with (partial \u0026#34;author.html\u0026#34; .) }} {{- . }} {{- end }} \u0026amp;nbsp;\u0026amp;nbsp; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;post_meta_style_6\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fa fa-tags\u0026#34; style=\u0026#34;opacity: 0.8\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt; {{- if .Params.tags }} \u0026lt;span class=\u0026#34;post-tags-meta\u0026#34;\u0026gt; {{- range $index, $value := ($.GetTerms \u0026#34;tags\u0026#34;) }} {{- if eq $index 0}} \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; style=\u0026#34;color: var(--secondary)!important;\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{- else }} \u0026amp;nbsp;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34; style=\u0026#34;color: var(--secondary)!important;\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{- end }} {{- end }} \u0026lt;/span\u0026gt; {{- end }} \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; 2. 理解 摸鱼ing\n","permalink":"https://Clow5211.github.io/posts/tech/tech/","summary":"1. 修改 需要进行更改的文件为layouts/partials/post_meta.html、layouts/partials/author.html、layouts/partials/extend_head.html以及params。 layouts/partials/post_me","title":"博客模板"},{"content":"","permalink":"https://Clow5211.github.io/posts/read/read/","summary":"","title":"Text-to-Text Transfer Transformer(T5)"},{"content":"关于我\n性别: 男 职业: 研究僧 运动: 跑步、乒乓球、爬山 ","permalink":"https://Clow5211.github.io/about/","summary":"关于我 性别: 男 职业: 研究僧 运动: 跑步、乒乓球、爬山","title":"🙋🏻‍♂️关于"},{"content":"","permalink":"https://Clow5211.github.io/posts/blog/blog/","summary":"","title":"Blog"},{"content":"","permalink":"https://Clow5211.github.io/posts/life/life/","summary":"","title":"Life"},{"content":"\r👉友链格式\r名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求\r秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群\r787018782\n","permalink":"https://Clow5211.github.io/links/","summary":"👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 👉Hugo博客交流群 787018782","title":"🤝友链"}]